#if !defined(_WIN32)
#include "ZQ_CNN_CompileConfig.h"
#endif


#include <stdio.h>
#include <malloc.h>
#include <string.h>
#include <time.h>

#if !__ARM_NEON

#if defined(_WIN32)
#include <intrin.h>//(include immintrin.h)
#if ZQ_CNN_USE_SSETYPE >= ZQ_CNN_SSETYPE_SSE
#include <mmintrin.h> //MMX  
#include <xmmintrin.h> //SSE(include mmintrin.h)  
#include <emmintrin.h> //SSE2(include xmmintrin.h)  
#include <pmmintrin.h> //SSE3(include emmintrin.h)  
#include <tmmintrin.h>//SSSE3(include pmmintrin.h)  
#include <smmintrin.h>//SSE4.1(include tmmintrin.h)  
#include <nmmintrin.h>//SSE4.2(include smmintrin.h)  
#endif 
#if ZQ_CNN_USE_SSETYPE >= ZQ_CNN_SSETYPE_AVX
#include <wmmintrin.h>//AES(include nmmintrin.h)  
#include <immintrin.h>//AVX(include wmmintrin.h)  
#include <intrin.h>//(include immintrin.h)  
#endif
#else
#include <x86intrin.h>
#endif

#if ZQ_CNN_USE_SSETYPE >= ZQ_CNN_SSETYPE_AVX2
#define zq_mm_fmadd_ps _mm256_fmadd_ps
#elif ZQ_CNN_USE_SSETYPE >= ZQ_CNN_SSETYPE_AVX
#define zq_mm_fmadd_ps(A,B,C) _mm256_add_ps(_mm256_mul_ps(A,B),C)
#else
#define zq_mm_fmadd_ps(A,B,C) _mm_add_ps(_mm_mul_ps(A,B),C)
#endif
#if ZQ_CNN_USE_SSETYPE >= ZQ_CNN_SSETYPE_AVX
#define final_sum(q) (q[0]+q[1]+q[2]+q[3]+q[4]+q[5]+q[6]+q[7])
#define zq_mm_set1_ps _mm256_set1_ps
#define zq_mm_setzero_ps _mm256_setzero_ps
#define zq_mm_add_ps _mm256_add_ps
#define zq_mm_mul_ps _mm256_mul_ps
#define zq_mm_store_ps _mm256_store_ps
#define zq_mm_load_ps _mm256_load_ps
#define zq_mm_type __m256
#define num_per_op 8
#define num_per_op2 16
#define num_per_op3 24
#define num_per_op4 32
#else
#define final_sum(q) (q[0]+q[1]+q[2]+q[3])
#define zq_mm_set1_ps _mm_set1_ps
#define zq_mm_setzero_ps _mm_setzero_ps
#define zq_mm_add_ps _mm_add_ps
#define zq_mm_mul_ps _mm_mul_ps
#define zq_mm_store_ps _mm_store_ps
#define zq_mm_load_ps _mm_load_ps
#define zq_mm_type __m128
#define num_per_op 4
#define num_per_op2 8
#define num_per_op3 12
#define num_per_op4 16
#endif

#else
#include <arm_neon.h>
#define final_sum(q) (q[0]+q[1]+q[2]+q[3])
#define zq_mm_store_ps vst1q_f32
#define zq_mm_load_ps vld1q_f32
#define zq_mm_add_ps vaddq_f32
#if ZQ_CNN_USE_FMADD128
#define zq_mm_fmadd_ps(A, B, C) vfmaq_f32(C, A, B)
#else
#define zq_mm_fmadd_ps(A, B, C) vaddq_f32(vmulq_f32(A, B), C)
#endif
#define zq_mm_mul_ps vmulq_f32
#define zq_mm_setzero_ps() vdupq_n_f32(0)
#define zq_mm_set1_ps vdupq_n_f32
#define zq_mm_type float32x4_t
#define num_per_op 4
#define num_per_op2 8
#define num_per_op3 12
#define num_per_op4 16
#endif

void example_for_very_high_gflops();
void test_memcpy(int type,bool in_cache);
void test_4x4x4_in_cache(int iter);
void test_4x4x8_in_cache(int iter);
void test_4x4x16_in_cache(int iter);
void test_8x8x8_in_cache(int iter);
void test_8x8x16_in_cache(int iter);
int main()
{
	test_4x4x4_in_cache(1);
	test_4x4x4_in_cache(2);
	test_4x4x4_in_cache(3);
	test_4x4x8_in_cache(1);
	test_4x4x8_in_cache(2);
	test_4x4x8_in_cache(3);
	test_4x4x16_in_cache(1);
	test_4x4x16_in_cache(2);
	test_4x4x16_in_cache(3);
	test_8x8x8_in_cache(1);
	test_8x8x8_in_cache(2);
	test_8x8x8_in_cache(3);
	test_8x8x16_in_cache(1);
	test_8x8x16_in_cache(2);
	test_8x8x16_in_cache(3);
	example_for_very_high_gflops();
	example_for_very_high_gflops();
	example_for_very_high_gflops();
	test_memcpy(0, false);
	test_memcpy(1, false);
	test_memcpy(2, false);
	test_memcpy(0, true);
	test_memcpy(1, true);
	test_memcpy(2, true);
	return 0;
}

void example_for_very_high_gflops()
{
#if __ARM_NEON
	int nIters = 20;
#else
	int nIters = 50;
#endif
	register zq_mm_type a1 = zq_mm_set1_ps(1), a2 = zq_mm_set1_ps(1), a3 = zq_mm_set1_ps(1), a4 = zq_mm_set1_ps(1);
	register zq_mm_type a5 = zq_mm_set1_ps(1), a6 = zq_mm_set1_ps(1), a7 = zq_mm_set1_ps(1), a8 = zq_mm_set1_ps(1);
	register zq_mm_type b1 = zq_mm_set1_ps(1), b2 = zq_mm_set1_ps(1), b3 = zq_mm_set1_ps(1), b4 = zq_mm_set1_ps(1);
	register zq_mm_type b5 = zq_mm_set1_ps(1), b6 = zq_mm_set1_ps(1), b7 = zq_mm_set1_ps(1), b8 = zq_mm_set1_ps(1);
	register zq_mm_type sum1 = zq_mm_setzero_ps();
	register zq_mm_type sum2 = zq_mm_setzero_ps();
	register zq_mm_type sum3 = zq_mm_setzero_ps();
	register zq_mm_type sum4 = zq_mm_setzero_ps();
	register zq_mm_type sum5 = zq_mm_setzero_ps();
	register zq_mm_type sum6 = zq_mm_setzero_ps();
	register zq_mm_type sum7 = zq_mm_setzero_ps();
	register zq_mm_type sum8 = zq_mm_setzero_ps();
	register zq_mm_type sum1_ = zq_mm_setzero_ps();
	register zq_mm_type sum2_ = zq_mm_setzero_ps();
	register zq_mm_type sum3_ = zq_mm_setzero_ps();
	register zq_mm_type sum4_ = zq_mm_setzero_ps();
	register zq_mm_type sum5_ = zq_mm_setzero_ps();
	register zq_mm_type sum6_ = zq_mm_setzero_ps();
	register zq_mm_type sum7_ = zq_mm_setzero_ps();
	register zq_mm_type sum8_ = zq_mm_setzero_ps();
	register zq_mm_type suma = zq_mm_setzero_ps();
	register zq_mm_type sumb = zq_mm_setzero_ps();
#if defined(_WIN32)
	_declspec(align(32)) float q[8];
#else
	ZQ_DECLSPEC_ALIGN32 float q[8];
#endif
	const int M = 10000, N = 64 * 1000;
	clock_t t1 = clock();
	int i, j, k;
	for (i = 0; i < nIters; i++)
	{
		suma = zq_mm_setzero_ps();
		for (j = 0; j < M; j++)
		{
			sum1 = zq_mm_setzero_ps();
			sum2 = zq_mm_setzero_ps();
			sum3 = zq_mm_setzero_ps();
			sum4 = zq_mm_setzero_ps();
			sum5 = zq_mm_setzero_ps();
			sum6 = zq_mm_setzero_ps();
			sum7 = zq_mm_setzero_ps();
			sum8 = zq_mm_setzero_ps();
			for (k = 0; k < N; k += 64)
			{
				sum1_ = zq_mm_fmadd_ps(a1, b1, sum1);
				sum2_ = zq_mm_fmadd_ps(a2, b2, sum2);
				sum3_ = zq_mm_fmadd_ps(a3, b3, sum3);
				sum4_ = zq_mm_fmadd_ps(a4, b4, sum4);
				sum5_ = zq_mm_fmadd_ps(a5, b5, sum5);
				sum6_ = zq_mm_fmadd_ps(a6, b6, sum6);
				sum7_ = zq_mm_fmadd_ps(a7, b7, sum7);
				sum8_ = zq_mm_fmadd_ps(a8, b8, sum8);
				sum1 = zq_mm_fmadd_ps(a1, b1, sum1_);
				sum2 = zq_mm_fmadd_ps(a2, b2, sum2_);
				sum3 = zq_mm_fmadd_ps(a3, b3, sum3_);
				sum4 = zq_mm_fmadd_ps(a4, b4, sum4_);
				sum5 = zq_mm_fmadd_ps(a5, b5, sum5_);
				sum6 = zq_mm_fmadd_ps(a6, b6, sum6_);
				sum7 = zq_mm_fmadd_ps(a7, b7, sum7_);
				sum8 = zq_mm_fmadd_ps(a8, b8, sum8_);
				sum1_ = zq_mm_fmadd_ps(a1, b1, sum1);
				sum2_ = zq_mm_fmadd_ps(a2, b2, sum2);
				sum3_ = zq_mm_fmadd_ps(a3, b3, sum3);
				sum4_ = zq_mm_fmadd_ps(a4, b4, sum4);
				sum5_ = zq_mm_fmadd_ps(a5, b5, sum5);
				sum6_ = zq_mm_fmadd_ps(a6, b6, sum6);
				sum7_ = zq_mm_fmadd_ps(a7, b7, sum7);
				sum8_ = zq_mm_fmadd_ps(a8, b8, sum8);
				sum1 = zq_mm_fmadd_ps(a1, b1, sum1_);
				sum2 = zq_mm_fmadd_ps(a2, b2, sum2_);
				sum3 = zq_mm_fmadd_ps(a3, b3, sum3_);
				sum4 = zq_mm_fmadd_ps(a4, b4, sum4_);
				sum5 = zq_mm_fmadd_ps(a5, b5, sum5_);
				sum6 = zq_mm_fmadd_ps(a6, b6, sum6_);
				sum7 = zq_mm_fmadd_ps(a7, b7, sum7_);
				sum8 = zq_mm_fmadd_ps(a8, b8, sum8_);
				sum1_ = zq_mm_fmadd_ps(a1, b1, sum1);
				sum2_ = zq_mm_fmadd_ps(a2, b2, sum2);
				sum3_ = zq_mm_fmadd_ps(a3, b3, sum3);
				sum4_ = zq_mm_fmadd_ps(a4, b4, sum4);
				sum5_ = zq_mm_fmadd_ps(a5, b5, sum5);
				sum6_ = zq_mm_fmadd_ps(a6, b6, sum6);
				sum7_ = zq_mm_fmadd_ps(a7, b7, sum7);
				sum8_ = zq_mm_fmadd_ps(a8, b8, sum8);
				sum1 = zq_mm_fmadd_ps(a1, b1, sum1_);
				sum2 = zq_mm_fmadd_ps(a2, b2, sum2_);
				sum3 = zq_mm_fmadd_ps(a3, b3, sum3_);
				sum4 = zq_mm_fmadd_ps(a4, b4, sum4_);
				sum5 = zq_mm_fmadd_ps(a5, b5, sum5_);
				sum6 = zq_mm_fmadd_ps(a6, b6, sum6_);
				sum7 = zq_mm_fmadd_ps(a7, b7, sum7_);
				sum8 = zq_mm_fmadd_ps(a8, b8, sum8_);
				sum1_ = zq_mm_fmadd_ps(a1, b1, sum1);
				sum2_ = zq_mm_fmadd_ps(a2, b2, sum2);
				sum3_ = zq_mm_fmadd_ps(a3, b3, sum3);
				sum4_ = zq_mm_fmadd_ps(a4, b4, sum4);
				sum5_ = zq_mm_fmadd_ps(a5, b5, sum5);
				sum6_ = zq_mm_fmadd_ps(a6, b6, sum6);
				sum7_ = zq_mm_fmadd_ps(a7, b7, sum7);
				sum8_ = zq_mm_fmadd_ps(a8, b8, sum8);
				sum1 = zq_mm_fmadd_ps(a1, b1, sum1_);
				sum2 = zq_mm_fmadd_ps(a2, b2, sum2_);
				sum3 = zq_mm_fmadd_ps(a3, b3, sum3_);
				sum4 = zq_mm_fmadd_ps(a4, b4, sum4_);
				sum5 = zq_mm_fmadd_ps(a5, b5, sum5_);
				sum6 = zq_mm_fmadd_ps(a6, b6, sum6_);
				sum7 = zq_mm_fmadd_ps(a7, b7, sum7_);
				sum8 = zq_mm_fmadd_ps(a8, b8, sum8_);

			}

			suma = zq_mm_add_ps(suma, sum1);
			suma = zq_mm_add_ps(suma, sum2);
			suma = zq_mm_add_ps(suma, sum3);
			suma = zq_mm_add_ps(suma, sum4);
			suma = zq_mm_add_ps(suma, sum5);
			suma = zq_mm_add_ps(suma, sum6);
			suma = zq_mm_add_ps(suma, sum7);
			suma = zq_mm_add_ps(suma, sum8);
		}
		sumb = zq_mm_add_ps(sumb, suma);
	}
	clock_t t2 = clock();
#if defined(_WIN32)
	double time = (t2 - t1) / 1000.0;
#else
	double time = (t2 - t1) / 1000000.0;
#endif
	double mul_count = (double)nIters*M*N * num_per_op / (1024.0*1024.0*1024.0);
	printf("mul_count = %.3f G, time = %.3f s, gflops = %.3f\n", mul_count, time, mul_count / time);
	printf("i,j,k=%d,%d,%d\n", i, j, k);
	zq_mm_store_ps(q, sum1);
	printf("%e %e %e %e %e %e %e %e\n", q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7]);
	zq_mm_store_ps(q, suma);
	printf("%e %e %e %e %e %e %e %e\n", q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7]);
	zq_mm_store_ps(q, sumb);
	printf("%e %e %e %e %e %e %e %e\n", q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7]);
}

void test_memcpy(int type, bool in_cache)
{
	int nIters = 3;
	clock_t t1, t2;
	register zq_mm_type vec0,vec1,vec2,vec3;
	int M = 1000, N = 1024*1024*num_per_op;
	if (in_cache)
	{
		M *= 1024*128;
		N /= 1024*128;
	}
	float* src = (float*)_aligned_malloc(N*sizeof(float),32);
	float* dst = (float*)_aligned_malloc(N*sizeof(float),32);
	float* cur_src_ptr, *cur_dst_ptr;
	for(int i = 0;i < N;i++)
		src[i] = i;
	if (type == 0)
	{
		printf("test load & store %s\n", in_cache ? "in cache":"not in cache");
		for (int i = 0; i < nIters; i++)
		{
			t1 = clock();
			for (int j = 0; j < M; j++)
			{
				cur_src_ptr = src;
				cur_dst_ptr = dst;
				for (int k = 0; k < N; k += num_per_op4)
				{
					vec0 = zq_mm_load_ps(cur_src_ptr);
					zq_mm_store_ps(cur_dst_ptr, vec0);
					vec1 = zq_mm_load_ps(cur_src_ptr + num_per_op);
					zq_mm_store_ps(cur_dst_ptr + num_per_op, vec1);
					vec2 = zq_mm_load_ps(cur_src_ptr + num_per_op2);
					zq_mm_store_ps(cur_dst_ptr + num_per_op2, vec2);
					vec3 = zq_mm_load_ps(cur_src_ptr + num_per_op3);
					zq_mm_store_ps(cur_dst_ptr + num_per_op3, vec3);
					cur_src_ptr += num_per_op4;
					cur_dst_ptr += num_per_op4;
				}
			}
			t2 = clock();
#if defined(_WIN32)
			double time = (t2 - t1)*0.001;
#else
			double time = (t2 - t1)*0.000001;
#endif
			double gflops = (double)M*N / (1024.0*1024.0*1024.0) / time;
			printf("time=%.3f s, gflops=%.3f\n", time, gflops);
		}
	}
	else if (type == 1)
	{
		printf("test only load (store to same addr) %s\n", in_cache ? "in cache" : "not in cache");
		for (int i = 0; i < nIters; i++)
		{
			t1 = clock();
			for (int j = 0; j < M; j++)
			{
				cur_src_ptr = src;
				cur_dst_ptr = dst;
				for (int k = 0; k < N; k += num_per_op4)
				{
					vec0 = zq_mm_load_ps(cur_src_ptr);
					zq_mm_store_ps(cur_dst_ptr, vec0);
					vec1 = zq_mm_load_ps(cur_src_ptr+num_per_op);
					zq_mm_store_ps(cur_dst_ptr + num_per_op, vec1);
					vec2 = zq_mm_load_ps(cur_src_ptr+num_per_op2);
					zq_mm_store_ps(cur_dst_ptr + num_per_op2, vec2);
					vec3 = zq_mm_load_ps(cur_src_ptr+num_per_op3);
					zq_mm_store_ps(cur_dst_ptr + num_per_op3, vec3);
					cur_src_ptr += num_per_op4;
				}
			}
			t2 = clock();
#if defined(_WIN32)
			double time = (t2 - t1)*0.001;
#else
			double time = (t2 - t1)*0.000001;
#endif
			double gflops = (double)M*N / (1024.0*1024.0*1024.0) / time;
			printf("time=%.3f s, gflops=%.3f\n", time, gflops);
		}
	}
	else
	{
		printf("test only store (load from same addr) %s\n", in_cache ? "in cache" : "not in cache");
		for (int i = 0; i < nIters; i++)
		{
			t1 = clock();
			for (int j = 0; j < M; j++)
			{
				cur_src_ptr = src;
				cur_dst_ptr = dst;
				for (int k = 0; k < N; k += num_per_op4)
				{
					vec0 = zq_mm_load_ps(cur_src_ptr);
					zq_mm_store_ps(cur_dst_ptr, vec0);
					vec1 = zq_mm_load_ps(cur_src_ptr + num_per_op);
					zq_mm_store_ps(cur_dst_ptr + num_per_op, vec1);
					vec2 = zq_mm_load_ps(cur_src_ptr + num_per_op2);
					zq_mm_store_ps(cur_dst_ptr + num_per_op2, vec2);
					vec3 = zq_mm_load_ps(cur_src_ptr + num_per_op3);
					zq_mm_store_ps(cur_dst_ptr + num_per_op3, vec3);
					cur_dst_ptr += num_per_op4;
				}
			}
			t2 = clock();
#if defined(_WIN32)
			double time = (t2 - t1)*0.001;
#else
			double time = (t2 - t1)*0.000001;
#endif
			double gflops = (double)M*N / (1024.0*1024.0*1024.0) / time;
			printf("time=%.3f s, gflops=%.3f\n", time, gflops);
		}
	}
	_aligned_free(src);
	_aligned_free(dst);
}

void test_4x4x4_in_cache(int iter)
{
	float* A = (float*)_aligned_malloc(4 * 4 * num_per_op * sizeof(float), num_per_op * 4);
	float* B = (float*)_aligned_malloc(4 * 4 * num_per_op * sizeof(float), num_per_op * 4);
	float* C = (float*)malloc(4 * 4 * sizeof(float));
	int i, j, k;
	for (i = 0; i < 4 * 4 * num_per_op; i++)
	{
		A[i] = i;
		B[i] = 1;
	}
#if defined(_WIN32)
	_declspec(align(32)) float q[8];
#else
	ZQ_DECLSPEC_ALIGN32 float q[8];
#endif
	register zq_mm_type a0, a1, a2, a3, b0, b1, b2, b3;
	register zq_mm_type c00, c01, c02, c03, c10, c11, c12, c13, c20, c21, c22, c23, c30, c31, c32, c33;
	int nIters = 5;
	int M = 10 * 1024 * 1024*iter;
	printf("test 4x4x%d\n", num_per_op * 4);
	for(int i = 0;i < nIters;i++)
	{ 
		memset(C, 0, sizeof(float) * 16);
		clock_t t1 = clock();
		for (j = 0; j < M; j++)
		{
			a0 = zq_mm_load_ps(A);
			a1 = zq_mm_load_ps(A + 4 * num_per_op);
			a2 = zq_mm_load_ps(A + 8 * num_per_op);
			a3 = zq_mm_load_ps(A + 12 * num_per_op);
			b0 = zq_mm_load_ps(B);
			b1 = zq_mm_load_ps(B + 4 * num_per_op);
			b2 = zq_mm_load_ps(B + 8 * num_per_op);
			b3 = zq_mm_load_ps(B + 12 * num_per_op);
			c00 = zq_mm_mul_ps(a0, b0);
			c01 = zq_mm_mul_ps(a0, b1);
			c02 = zq_mm_mul_ps(a0, b2);
			c03 = zq_mm_mul_ps(a0, b3);
			c10 = zq_mm_mul_ps(a1, b0);
			c11 = zq_mm_mul_ps(a1, b1);
			c12 = zq_mm_mul_ps(a1, b2);
			c13 = zq_mm_mul_ps(a1, b3);
			c20 = zq_mm_mul_ps(a2, b0);
			c21 = zq_mm_mul_ps(a2, b1);
			c22 = zq_mm_mul_ps(a2, b2);
			c23 = zq_mm_mul_ps(a2, b3);
			c30 = zq_mm_mul_ps(a3, b0);
			c31 = zq_mm_mul_ps(a3, b1);
			c32 = zq_mm_mul_ps(a3, b2);
			c33 = zq_mm_mul_ps(a3, b3);
			a0 = zq_mm_load_ps(A + 1 * num_per_op);
			a1 = zq_mm_load_ps(A + 5 * num_per_op);
			a2 = zq_mm_load_ps(A + 9 * num_per_op);
			a3 = zq_mm_load_ps(A + 13 * num_per_op);
			b0 = zq_mm_load_ps(B + 1 * num_per_op);
			b1 = zq_mm_load_ps(B + 5 * num_per_op);
			b2 = zq_mm_load_ps(B + 9 * num_per_op);
			b3 = zq_mm_load_ps(B + 13 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 2 * num_per_op);
			a1 = zq_mm_load_ps(A + 6 * num_per_op);
			a2 = zq_mm_load_ps(A + 10 * num_per_op);
			a3 = zq_mm_load_ps(A + 14 * num_per_op);
			b0 = zq_mm_load_ps(B + 2 * num_per_op);
			b1 = zq_mm_load_ps(B + 6 * num_per_op);
			b2 = zq_mm_load_ps(B + 10 * num_per_op);
			b3 = zq_mm_load_ps(B + 14 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 3 * num_per_op);
			a1 = zq_mm_load_ps(A + 7 * num_per_op);
			a2 = zq_mm_load_ps(A + 11 * num_per_op);
			a3 = zq_mm_load_ps(A + 15 * num_per_op);
			b0 = zq_mm_load_ps(B + 3 * num_per_op);
			b1 = zq_mm_load_ps(B + 7 * num_per_op);
			b2 = zq_mm_load_ps(B + 11 * num_per_op);
			b3 = zq_mm_load_ps(B + 15 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			zq_mm_store_ps(q, c00);
			C[0] += final_sum(q);
			zq_mm_store_ps(q, c01);
			C[1] += final_sum(q);
			zq_mm_store_ps(q, c02);
			C[2] += final_sum(q);
			zq_mm_store_ps(q, c03);
			C[3] += final_sum(q);
			zq_mm_store_ps(q, c10);
			C[4] += final_sum(q);
			zq_mm_store_ps(q, c11);
			C[5] += final_sum(q);
			zq_mm_store_ps(q, c12);
			C[6] += final_sum(q);
			zq_mm_store_ps(q, c13);
			C[7] += final_sum(q);
			zq_mm_store_ps(q, c20);
			C[8] += final_sum(q);
			zq_mm_store_ps(q, c21);
			C[9] += final_sum(q);
			zq_mm_store_ps(q, c22);
			C[10] += final_sum(q);
			zq_mm_store_ps(q, c23);
			C[11] += final_sum(q);
			zq_mm_store_ps(q, c30);
			C[12] += final_sum(q);
			zq_mm_store_ps(q, c31);
			C[13] += final_sum(q);
			zq_mm_store_ps(q, c32);
			C[14] += final_sum(q);
			zq_mm_store_ps(q, c33);
			C[15] += final_sum(q);
		}
		clock_t t2 = clock();
#if defined(_WIN32)
		double time = (t2 - t1)*0.001;
#else
		double time = (t2 - t1)*0.000001;
#endif
		double gflops = 4.0*4.0*4.0*num_per_op*M / (1024.0*1024.0*1024.0)/time;
		printf("time = %.3f s, gflops = %.3f\n", time, gflops);
		for (k = 0; k < 1; k++)
			printf("%.1e ", C[k]);
		printf("\n");
	}
	_aligned_free(A);
	_aligned_free(B);
	free(C);
}

void test_4x4x8_in_cache(int iter)
{
	float* A = (float*)_aligned_malloc(4 * 8 * num_per_op * sizeof(float), num_per_op * 8);
	float* B = (float*)_aligned_malloc(4 * 8 * num_per_op * sizeof(float), num_per_op * 8);
	float* C = (float*)malloc(4 * 4 * sizeof(float));
	int i, j, k;
	for (i = 0; i < 4 * 8 * num_per_op; i++)
	{
		A[i] = i;
		B[i] = 1;
	}
#if defined(_WIN32)
	_declspec(align(32)) float q[8];
#else
	ZQ_DECLSPEC_ALIGN32 float q[8];
#endif
	register zq_mm_type a0, a1, a2, a3, b0, b1, b2, b3;
	register zq_mm_type c00, c01, c02, c03, c10, c11, c12, c13, c20, c21, c22, c23, c30, c31, c32, c33;
	int nIters = 5;
	int M = 5 * 1024 * 1024*iter;
	printf("test 4x4x%d\n", num_per_op * 8);
	for (int i = 0; i < nIters; i++)
	{
		memset(C, 0, sizeof(float) * 16);
		clock_t t1 = clock();
		for (j = 0; j < M; j++)
		{
			a0 = zq_mm_load_ps(A);
			a1 = zq_mm_load_ps(A + 8 * num_per_op);
			a2 = zq_mm_load_ps(A + 16 * num_per_op);
			a3 = zq_mm_load_ps(A + 24 * num_per_op);
			b0 = zq_mm_load_ps(B);
			b1 = zq_mm_load_ps(B + 8 * num_per_op);
			b2 = zq_mm_load_ps(B + 16 * num_per_op);
			b3 = zq_mm_load_ps(B + 24 * num_per_op);
			c00 = zq_mm_mul_ps(a0, b0);
			c01 = zq_mm_mul_ps(a0, b1);
			c02 = zq_mm_mul_ps(a0, b2);
			c03 = zq_mm_mul_ps(a0, b3);
			c10 = zq_mm_mul_ps(a1, b0);
			c11 = zq_mm_mul_ps(a1, b1);
			c12 = zq_mm_mul_ps(a1, b2);
			c13 = zq_mm_mul_ps(a1, b3);
			c20 = zq_mm_mul_ps(a2, b0);
			c21 = zq_mm_mul_ps(a2, b1);
			c22 = zq_mm_mul_ps(a2, b2);
			c23 = zq_mm_mul_ps(a2, b3);
			c30 = zq_mm_mul_ps(a3, b0);
			c31 = zq_mm_mul_ps(a3, b1);
			c32 = zq_mm_mul_ps(a3, b2);
			c33 = zq_mm_mul_ps(a3, b3);
			a0 = zq_mm_load_ps(A + 1 * num_per_op);
			a1 = zq_mm_load_ps(A + 9 * num_per_op);
			a2 = zq_mm_load_ps(A + 17 * num_per_op);
			a3 = zq_mm_load_ps(A + 25 * num_per_op);
			b0 = zq_mm_load_ps(B + 1 * num_per_op);
			b1 = zq_mm_load_ps(B + 9 * num_per_op);
			b2 = zq_mm_load_ps(B + 17 * num_per_op);
			b3 = zq_mm_load_ps(B + 25 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 2 * num_per_op);
			a1 = zq_mm_load_ps(A + 10 * num_per_op);
			a2 = zq_mm_load_ps(A + 18 * num_per_op);
			a3 = zq_mm_load_ps(A + 26 * num_per_op);
			b0 = zq_mm_load_ps(B + 2 * num_per_op);
			b1 = zq_mm_load_ps(B + 10 * num_per_op);
			b2 = zq_mm_load_ps(B + 18 * num_per_op);
			b3 = zq_mm_load_ps(B + 26 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 3 * num_per_op);
			a1 = zq_mm_load_ps(A + 11 * num_per_op);
			a2 = zq_mm_load_ps(A + 19 * num_per_op);
			a3 = zq_mm_load_ps(A + 27 * num_per_op);
			b0 = zq_mm_load_ps(B + 3 * num_per_op);
			b1 = zq_mm_load_ps(B + 11 * num_per_op);
			b2 = zq_mm_load_ps(B + 19 * num_per_op);
			b3 = zq_mm_load_ps(B + 27 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 4 * num_per_op);
			a1 = zq_mm_load_ps(A + 12 * num_per_op);
			a2 = zq_mm_load_ps(A + 20 * num_per_op);
			a3 = zq_mm_load_ps(A + 28 * num_per_op);
			b0 = zq_mm_load_ps(B + 4 * num_per_op);
			b1 = zq_mm_load_ps(B + 12 * num_per_op);
			b2 = zq_mm_load_ps(B + 20 * num_per_op);
			b3 = zq_mm_load_ps(B + 28 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 5 * num_per_op);
			a1 = zq_mm_load_ps(A + 13 * num_per_op);
			a2 = zq_mm_load_ps(A + 21 * num_per_op);
			a3 = zq_mm_load_ps(A + 29 * num_per_op);
			b0 = zq_mm_load_ps(B + 5 * num_per_op);
			b1 = zq_mm_load_ps(B + 13 * num_per_op);
			b2 = zq_mm_load_ps(B + 21 * num_per_op);
			b3 = zq_mm_load_ps(B + 29 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 6 * num_per_op);
			a1 = zq_mm_load_ps(A + 14 * num_per_op);
			a2 = zq_mm_load_ps(A + 22 * num_per_op);
			a3 = zq_mm_load_ps(A + 30 * num_per_op);
			b0 = zq_mm_load_ps(B + 6 * num_per_op);
			b1 = zq_mm_load_ps(B + 14 * num_per_op);
			b2 = zq_mm_load_ps(B + 22 * num_per_op);
			b3 = zq_mm_load_ps(B + 30 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 7 * num_per_op);
			a1 = zq_mm_load_ps(A + 15 * num_per_op);
			a2 = zq_mm_load_ps(A + 23 * num_per_op);
			a3 = zq_mm_load_ps(A + 31 * num_per_op);
			b0 = zq_mm_load_ps(B + 7 * num_per_op);
			b1 = zq_mm_load_ps(B + 15 * num_per_op);
			b2 = zq_mm_load_ps(B + 23 * num_per_op);
			b3 = zq_mm_load_ps(B + 31 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			zq_mm_store_ps(q, c00);
			C[0] += final_sum(q);
			zq_mm_store_ps(q, c01);
			C[1] += final_sum(q);
			zq_mm_store_ps(q, c02);
			C[2] += final_sum(q);
			zq_mm_store_ps(q, c03);
			C[3] += final_sum(q);
			zq_mm_store_ps(q, c10);
			C[4] += final_sum(q);
			zq_mm_store_ps(q, c11);
			C[5] += final_sum(q);
			zq_mm_store_ps(q, c12);
			C[6] += final_sum(q);
			zq_mm_store_ps(q, c13);
			C[7] += final_sum(q);
			zq_mm_store_ps(q, c20);
			C[8] += final_sum(q);
			zq_mm_store_ps(q, c21);
			C[9] += final_sum(q);
			zq_mm_store_ps(q, c22);
			C[10] += final_sum(q);
			zq_mm_store_ps(q, c23);
			C[11] += final_sum(q);
			zq_mm_store_ps(q, c30);
			C[12] += final_sum(q);
			zq_mm_store_ps(q, c31);
			C[13] += final_sum(q);
			zq_mm_store_ps(q, c32);
			C[14] += final_sum(q);
			zq_mm_store_ps(q, c33);
			C[15] += final_sum(q);
		}
		clock_t t2 = clock();
#if defined(_WIN32)
		double time = (t2 - t1)*0.001;
#else
		double time = (t2 - t1)*0.000001;
#endif
		double gflops = 4.0*4.0*8.0*num_per_op*M / (1024.0*1024.0*1024.0) / time;
		printf("time = %.3f s, gflops = %.3f\n", time, gflops);
		for (k = 0; k < 1; k++)
			printf("%.1e ", C[k]);
		printf("\n");
	}
	_aligned_free(A);
	_aligned_free(B);
	free(C);
}

void test_4x4x16_in_cache(int iter)
{
	float* A = (float*)_aligned_malloc(4 * 16 * num_per_op * sizeof(float), num_per_op * 16);
	float* B = (float*)_aligned_malloc(4 * 16 * num_per_op * sizeof(float), num_per_op * 16);
	float* C = (float*)malloc(4 * 4 * sizeof(float));
	int i, j, k;
	for (i = 0; i < 4 * 16 * num_per_op; i++)
	{
		A[i] = i;
		B[i] = 1;
	}
#if defined(_WIN32)
	_declspec(align(32)) float q[8];
#else
	ZQ_DECLSPEC_ALIGN32 float q[8];
#endif
	register zq_mm_type a0, a1, a2, a3, b0, b1, b2, b3;
	register zq_mm_type c00, c01, c02, c03, c10, c11, c12, c13, c20, c21, c22, c23, c30, c31, c32, c33;
	int nIters = 5;
	int M = 3 * 1024 * 1024*iter;
	printf("test 4x4x%d\n", num_per_op * 16);
	for (int i = 0; i < nIters; i++)
	{
		memset(C, 0, sizeof(float) * 16);
		clock_t t1 = clock();
		for (j = 0; j < M; j++)
		{
			a0 = zq_mm_load_ps(A);
			a1 = zq_mm_load_ps(A + 16 * num_per_op);
			a2 = zq_mm_load_ps(A + 32 * num_per_op);
			a3 = zq_mm_load_ps(A + 48 * num_per_op);
			b0 = zq_mm_load_ps(B);
			b1 = zq_mm_load_ps(B + 16 * num_per_op);
			b2 = zq_mm_load_ps(B + 32 * num_per_op);
			b3 = zq_mm_load_ps(B + 48 * num_per_op);
			c00 = zq_mm_mul_ps(a0, b0);
			c01 = zq_mm_mul_ps(a0, b1);
			c02 = zq_mm_mul_ps(a0, b2);
			c03 = zq_mm_mul_ps(a0, b3);
			c10 = zq_mm_mul_ps(a1, b0);
			c11 = zq_mm_mul_ps(a1, b1);
			c12 = zq_mm_mul_ps(a1, b2);
			c13 = zq_mm_mul_ps(a1, b3);
			c20 = zq_mm_mul_ps(a2, b0);
			c21 = zq_mm_mul_ps(a2, b1);
			c22 = zq_mm_mul_ps(a2, b2);
			c23 = zq_mm_mul_ps(a2, b3);
			c30 = zq_mm_mul_ps(a3, b0);
			c31 = zq_mm_mul_ps(a3, b1);
			c32 = zq_mm_mul_ps(a3, b2);
			c33 = zq_mm_mul_ps(a3, b3);
			a0 = zq_mm_load_ps(A + 1 * num_per_op);
			a1 = zq_mm_load_ps(A + 17 * num_per_op);
			a2 = zq_mm_load_ps(A + 33 * num_per_op);
			a3 = zq_mm_load_ps(A + 49 * num_per_op);
			b0 = zq_mm_load_ps(B + 1 * num_per_op);
			b1 = zq_mm_load_ps(B + 17 * num_per_op);
			b2 = zq_mm_load_ps(B + 33 * num_per_op);
			b3 = zq_mm_load_ps(B + 49 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 2 * num_per_op);
			a1 = zq_mm_load_ps(A + 18 * num_per_op);
			a2 = zq_mm_load_ps(A + 34 * num_per_op);
			a3 = zq_mm_load_ps(A + 50 * num_per_op);
			b0 = zq_mm_load_ps(B + 2 * num_per_op);
			b1 = zq_mm_load_ps(B + 18 * num_per_op);
			b2 = zq_mm_load_ps(B + 34 * num_per_op);
			b3 = zq_mm_load_ps(B + 50 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 3 * num_per_op);
			a1 = zq_mm_load_ps(A + 19 * num_per_op);
			a2 = zq_mm_load_ps(A + 35 * num_per_op);
			a3 = zq_mm_load_ps(A + 51 * num_per_op);
			b0 = zq_mm_load_ps(B + 3 * num_per_op);
			b1 = zq_mm_load_ps(B + 19 * num_per_op);
			b2 = zq_mm_load_ps(B + 35 * num_per_op);
			b3 = zq_mm_load_ps(B + 51 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 4 * num_per_op);
			a1 = zq_mm_load_ps(A + 20 * num_per_op);
			a2 = zq_mm_load_ps(A + 36 * num_per_op);
			a3 = zq_mm_load_ps(A + 52 * num_per_op);
			b0 = zq_mm_load_ps(B + 4 * num_per_op);
			b1 = zq_mm_load_ps(B + 20 * num_per_op);
			b2 = zq_mm_load_ps(B + 36 * num_per_op);
			b3 = zq_mm_load_ps(B + 52 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 5 * num_per_op);
			a1 = zq_mm_load_ps(A + 21 * num_per_op);
			a2 = zq_mm_load_ps(A + 37 * num_per_op);
			a3 = zq_mm_load_ps(A + 53 * num_per_op);
			b0 = zq_mm_load_ps(B + 5 * num_per_op);
			b1 = zq_mm_load_ps(B + 21 * num_per_op);
			b2 = zq_mm_load_ps(B + 37 * num_per_op);
			b3 = zq_mm_load_ps(B + 53 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 6 * num_per_op);
			a1 = zq_mm_load_ps(A + 22 * num_per_op);
			a2 = zq_mm_load_ps(A + 38 * num_per_op);
			a3 = zq_mm_load_ps(A + 54 * num_per_op);
			b0 = zq_mm_load_ps(B + 6 * num_per_op);
			b1 = zq_mm_load_ps(B + 22 * num_per_op);
			b2 = zq_mm_load_ps(B + 38 * num_per_op);
			b3 = zq_mm_load_ps(B + 54 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 7 * num_per_op);
			a1 = zq_mm_load_ps(A + 23 * num_per_op);
			a2 = zq_mm_load_ps(A + 39 * num_per_op);
			a3 = zq_mm_load_ps(A + 55 * num_per_op);
			b0 = zq_mm_load_ps(B + 7 * num_per_op);
			b1 = zq_mm_load_ps(B + 23 * num_per_op);
			b2 = zq_mm_load_ps(B + 39 * num_per_op);
			b3 = zq_mm_load_ps(B + 55 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 8 * num_per_op);
			a1 = zq_mm_load_ps(A + 24 * num_per_op);
			a2 = zq_mm_load_ps(A + 40 * num_per_op);
			a3 = zq_mm_load_ps(A + 56 * num_per_op);
			b0 = zq_mm_load_ps(B + 8 * num_per_op);
			b1 = zq_mm_load_ps(B + 24 * num_per_op);
			b2 = zq_mm_load_ps(B + 40 * num_per_op);
			b3 = zq_mm_load_ps(B + 56 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 9 * num_per_op);
			a1 = zq_mm_load_ps(A + 25 * num_per_op);
			a2 = zq_mm_load_ps(A + 41 * num_per_op);
			a3 = zq_mm_load_ps(A + 57 * num_per_op);
			b0 = zq_mm_load_ps(B + 9 * num_per_op);
			b1 = zq_mm_load_ps(B + 25 * num_per_op);
			b2 = zq_mm_load_ps(B + 41 * num_per_op);
			b3 = zq_mm_load_ps(B + 57 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 10 * num_per_op);
			a1 = zq_mm_load_ps(A + 26 * num_per_op);
			a2 = zq_mm_load_ps(A + 42 * num_per_op);
			a3 = zq_mm_load_ps(A + 58 * num_per_op);
			b0 = zq_mm_load_ps(B + 10 * num_per_op);
			b1 = zq_mm_load_ps(B + 26 * num_per_op);
			b2 = zq_mm_load_ps(B + 42 * num_per_op);
			b3 = zq_mm_load_ps(B + 58 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 11 * num_per_op);
			a1 = zq_mm_load_ps(A + 27 * num_per_op);
			a2 = zq_mm_load_ps(A + 43 * num_per_op);
			a3 = zq_mm_load_ps(A + 59 * num_per_op);
			b0 = zq_mm_load_ps(B + 11 * num_per_op);
			b1 = zq_mm_load_ps(B + 27 * num_per_op);
			b2 = zq_mm_load_ps(B + 43 * num_per_op);
			b3 = zq_mm_load_ps(B + 59 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 12 * num_per_op);
			a1 = zq_mm_load_ps(A + 28 * num_per_op);
			a2 = zq_mm_load_ps(A + 44 * num_per_op);
			a3 = zq_mm_load_ps(A + 60 * num_per_op);
			b0 = zq_mm_load_ps(B + 12 * num_per_op);
			b1 = zq_mm_load_ps(B + 28 * num_per_op);
			b2 = zq_mm_load_ps(B + 44 * num_per_op);
			b3 = zq_mm_load_ps(B + 60 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 13 * num_per_op);
			a1 = zq_mm_load_ps(A + 29 * num_per_op);
			a2 = zq_mm_load_ps(A + 45 * num_per_op);
			a3 = zq_mm_load_ps(A + 61 * num_per_op);
			b0 = zq_mm_load_ps(B + 13 * num_per_op);
			b1 = zq_mm_load_ps(B + 29 * num_per_op);
			b2 = zq_mm_load_ps(B + 45 * num_per_op);
			b3 = zq_mm_load_ps(B + 61 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 14 * num_per_op);
			a1 = zq_mm_load_ps(A + 30 * num_per_op);
			a2 = zq_mm_load_ps(A + 46 * num_per_op);
			a3 = zq_mm_load_ps(A + 62 * num_per_op);
			b0 = zq_mm_load_ps(B + 14 * num_per_op);
			b1 = zq_mm_load_ps(B + 30 * num_per_op);
			b2 = zq_mm_load_ps(B + 46 * num_per_op);
			b3 = zq_mm_load_ps(B + 62 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			a0 = zq_mm_load_ps(A + 15 * num_per_op);
			a1 = zq_mm_load_ps(A + 31 * num_per_op);
			a2 = zq_mm_load_ps(A + 47 * num_per_op);
			a3 = zq_mm_load_ps(A + 63 * num_per_op);
			b0 = zq_mm_load_ps(B + 15 * num_per_op);
			b1 = zq_mm_load_ps(B + 31 * num_per_op);
			b2 = zq_mm_load_ps(B + 47 * num_per_op);
			b3 = zq_mm_load_ps(B + 63 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			zq_mm_store_ps(q, c00);
			C[0] += final_sum(q);
			zq_mm_store_ps(q, c01);
			C[1] += final_sum(q);
			zq_mm_store_ps(q, c02);
			C[2] += final_sum(q);
			zq_mm_store_ps(q, c03);
			C[3] += final_sum(q);
			zq_mm_store_ps(q, c10);
			C[4] += final_sum(q);
			zq_mm_store_ps(q, c11);
			C[5] += final_sum(q);
			zq_mm_store_ps(q, c12);
			C[6] += final_sum(q);
			zq_mm_store_ps(q, c13);
			C[7] += final_sum(q);
			zq_mm_store_ps(q, c20);
			C[8] += final_sum(q);
			zq_mm_store_ps(q, c21);
			C[9] += final_sum(q);
			zq_mm_store_ps(q, c22);
			C[10] += final_sum(q);
			zq_mm_store_ps(q, c23);
			C[11] += final_sum(q);
			zq_mm_store_ps(q, c30);
			C[12] += final_sum(q);
			zq_mm_store_ps(q, c31);
			C[13] += final_sum(q);
			zq_mm_store_ps(q, c32);
			C[14] += final_sum(q);
			zq_mm_store_ps(q, c33);
			C[15] += final_sum(q);
		}
		clock_t t2 = clock();
#if defined(_WIN32)
		double time = (t2 - t1)*0.001;
#else
		double time = (t2 - t1)*0.000001;
#endif
		double gflops = 4.0*4.0*16.0*num_per_op*M / (1024.0*1024.0*1024.0)/time;
		printf("time = %.3f s, gflops = %.3f\n", time, gflops);
		for (k = 0; k < 1; k++)
			printf("%.1e ", C[k]);
		printf("\n");
	}
	_aligned_free(A);
	_aligned_free(B);
	free(C);
}

void test_8x8x8_in_cache(int iter)
{
	float* A = (float*)_aligned_malloc(8 * 8 * num_per_op * sizeof(float), num_per_op * 16);
	float* B = (float*)_aligned_malloc(8 * 8 * num_per_op * sizeof(float), num_per_op * 16);
	float* C = (float*)malloc(8 * 8 * sizeof(float));
	int i, j, k;
	for (i = 0; i < 8 * 8 * num_per_op; i++)
	{
		A[i] = i;
		B[i] = 1;
	}
#if defined(_WIN32)
	_declspec(align(32)) float q[8];
#else
	ZQ_DECLSPEC_ALIGN32 float q[8];
#endif
	register zq_mm_type a0, a1, a2, a3, a4, a5, a6, a7, b0, b1, b2, b3, b4, b5, b6, b7;
	register zq_mm_type c00, c01, c02, c03, c04, c05, c06, c07;
	register zq_mm_type c10, c11, c12, c13, c14, c15, c16, c17;
	register zq_mm_type c20, c21, c22, c23, c24, c25, c26, c27;
	register zq_mm_type c30, c31, c32, c33, c34, c35, c36, c37;
	register zq_mm_type c40, c41, c42, c43, c44, c45, c46, c47;
	register zq_mm_type c50, c51, c52, c53, c54, c55, c56, c57;
	register zq_mm_type c60, c61, c62, c63, c64, c65, c66, c67;
	register zq_mm_type c70, c71, c72, c73, c74, c75, c76, c77;

	int nIters = 5;
	int M = 3 * 1024 * 1024 * iter;
	printf("test 8x8x%d\n", num_per_op * 8);
	for (int i = 0; i < nIters; i++)
	{
		memset(C, 0, sizeof(float) * 64);
		clock_t t1 = clock();
		for (j = 0; j < M; j++)
		{
			a0 = zq_mm_load_ps(A);
			a1 = zq_mm_load_ps(A + 8 * num_per_op);
			a2 = zq_mm_load_ps(A + 16 * num_per_op);
			a3 = zq_mm_load_ps(A + 24 * num_per_op);
			a4 = zq_mm_load_ps(A + 32 * num_per_op);
			a5 = zq_mm_load_ps(A + 40 * num_per_op);
			a6 = zq_mm_load_ps(A + 48 * num_per_op);
			a7 = zq_mm_load_ps(A + 56 * num_per_op);
			b0 = zq_mm_load_ps(B);
			b1 = zq_mm_load_ps(B + 8 * num_per_op);
			b2 = zq_mm_load_ps(B + 16 * num_per_op);
			b3 = zq_mm_load_ps(B + 24 * num_per_op);
			b4 = zq_mm_load_ps(B + 32 * num_per_op);
			b5 = zq_mm_load_ps(B + 40 * num_per_op);
			b6 = zq_mm_load_ps(B + 48 * num_per_op);
			b7 = zq_mm_load_ps(B + 56 * num_per_op);
			c00 = zq_mm_mul_ps(a0, b0);
			c01 = zq_mm_mul_ps(a0, b1);
			c02 = zq_mm_mul_ps(a0, b2);
			c03 = zq_mm_mul_ps(a0, b3);
			c04 = zq_mm_mul_ps(a0, b4);
			c05 = zq_mm_mul_ps(a0, b5);
			c06 = zq_mm_mul_ps(a0, b6);
			c07 = zq_mm_mul_ps(a0, b7);
			c10 = zq_mm_mul_ps(a1, b0);
			c11 = zq_mm_mul_ps(a1, b1);
			c12 = zq_mm_mul_ps(a1, b2);
			c13 = zq_mm_mul_ps(a1, b3);
			c14 = zq_mm_mul_ps(a1, b4);
			c15 = zq_mm_mul_ps(a1, b5);
			c16 = zq_mm_mul_ps(a1, b6);
			c17 = zq_mm_mul_ps(a1, b7);
			c20 = zq_mm_mul_ps(a2, b0);
			c21 = zq_mm_mul_ps(a2, b1);
			c22 = zq_mm_mul_ps(a2, b2);
			c23 = zq_mm_mul_ps(a2, b3);
			c24 = zq_mm_mul_ps(a2, b4);
			c25 = zq_mm_mul_ps(a2, b5);
			c26 = zq_mm_mul_ps(a2, b6);
			c27 = zq_mm_mul_ps(a2, b7);
			c30 = zq_mm_mul_ps(a3, b0);
			c31 = zq_mm_mul_ps(a3, b1);
			c32 = zq_mm_mul_ps(a3, b2);
			c33 = zq_mm_mul_ps(a3, b3);
			c34 = zq_mm_mul_ps(a3, b4);
			c35 = zq_mm_mul_ps(a3, b5);
			c36 = zq_mm_mul_ps(a3, b6);
			c37 = zq_mm_mul_ps(a3, b7);
			c40 = zq_mm_mul_ps(a4, b0);
			c41 = zq_mm_mul_ps(a4, b1);
			c42 = zq_mm_mul_ps(a4, b2);
			c43 = zq_mm_mul_ps(a4, b3);
			c44 = zq_mm_mul_ps(a4, b4);
			c45 = zq_mm_mul_ps(a4, b5);
			c46 = zq_mm_mul_ps(a4, b6);
			c47 = zq_mm_mul_ps(a4, b7);
			c50 = zq_mm_mul_ps(a5, b0);
			c51 = zq_mm_mul_ps(a5, b1);
			c52 = zq_mm_mul_ps(a5, b2);
			c53 = zq_mm_mul_ps(a5, b3);
			c54 = zq_mm_mul_ps(a5, b4);
			c55 = zq_mm_mul_ps(a5, b5);
			c56 = zq_mm_mul_ps(a5, b6);
			c57 = zq_mm_mul_ps(a5, b7);
			c60 = zq_mm_mul_ps(a6, b0);
			c61 = zq_mm_mul_ps(a6, b1);
			c62 = zq_mm_mul_ps(a6, b2);
			c63 = zq_mm_mul_ps(a6, b3);
			c64 = zq_mm_mul_ps(a6, b4);
			c65 = zq_mm_mul_ps(a6, b5);
			c66 = zq_mm_mul_ps(a6, b6);
			c67 = zq_mm_mul_ps(a6, b7);
			c70 = zq_mm_mul_ps(a7, b0);
			c71 = zq_mm_mul_ps(a7, b1);
			c72 = zq_mm_mul_ps(a7, b2);
			c73 = zq_mm_mul_ps(a7, b3);
			c74 = zq_mm_mul_ps(a7, b4);
			c75 = zq_mm_mul_ps(a7, b5);
			c76 = zq_mm_mul_ps(a7, b6);
			c77 = zq_mm_mul_ps(a7, b7);
			a0 = zq_mm_load_ps(A + 1 * num_per_op);
			a1 = zq_mm_load_ps(A + 9 * num_per_op);
			a2 = zq_mm_load_ps(A + 17 * num_per_op);
			a3 = zq_mm_load_ps(A + 25 * num_per_op);
			a4 = zq_mm_load_ps(A + 33 * num_per_op);
			a5 = zq_mm_load_ps(A + 41 * num_per_op);
			a6 = zq_mm_load_ps(A + 49 * num_per_op);
			a7 = zq_mm_load_ps(A + 57 * num_per_op);
			b0 = zq_mm_load_ps(B + 1 * num_per_op);
			b1 = zq_mm_load_ps(B + 9 * num_per_op);
			b2 = zq_mm_load_ps(B + 17 * num_per_op);
			b3 = zq_mm_load_ps(B + 25 * num_per_op);
			b4 = zq_mm_load_ps(B + 33 * num_per_op);
			b5 = zq_mm_load_ps(B + 41 * num_per_op);
			b6 = zq_mm_load_ps(B + 49 * num_per_op);
			b7 = zq_mm_load_ps(B + 57 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 2 * num_per_op);
			a1 = zq_mm_load_ps(A + 10 * num_per_op);
			a2 = zq_mm_load_ps(A + 18 * num_per_op);
			a3 = zq_mm_load_ps(A + 26 * num_per_op);
			a4 = zq_mm_load_ps(A + 34 * num_per_op);
			a5 = zq_mm_load_ps(A + 42 * num_per_op);
			a6 = zq_mm_load_ps(A + 50 * num_per_op);
			a7 = zq_mm_load_ps(A + 58 * num_per_op);
			b0 = zq_mm_load_ps(B + 2 * num_per_op);
			b1 = zq_mm_load_ps(B + 10 * num_per_op);
			b2 = zq_mm_load_ps(B + 18 * num_per_op);
			b3 = zq_mm_load_ps(B + 26 * num_per_op);
			b4 = zq_mm_load_ps(B + 34 * num_per_op);
			b5 = zq_mm_load_ps(B + 42 * num_per_op);
			b6 = zq_mm_load_ps(B + 50 * num_per_op);
			b7 = zq_mm_load_ps(B + 58 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 3 * num_per_op);
			a1 = zq_mm_load_ps(A + 11 * num_per_op);
			a2 = zq_mm_load_ps(A + 19 * num_per_op);
			a3 = zq_mm_load_ps(A + 27 * num_per_op);
			a4 = zq_mm_load_ps(A + 35 * num_per_op);
			a5 = zq_mm_load_ps(A + 43 * num_per_op);
			a6 = zq_mm_load_ps(A + 51 * num_per_op);
			a7 = zq_mm_load_ps(A + 59 * num_per_op);
			b0 = zq_mm_load_ps(B + 3 * num_per_op);
			b1 = zq_mm_load_ps(B + 11 * num_per_op);
			b2 = zq_mm_load_ps(B + 19 * num_per_op);
			b3 = zq_mm_load_ps(B + 27 * num_per_op);
			b4 = zq_mm_load_ps(B + 35 * num_per_op);
			b5 = zq_mm_load_ps(B + 43 * num_per_op);
			b6 = zq_mm_load_ps(B + 51 * num_per_op);
			b7 = zq_mm_load_ps(B + 59 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 4 * num_per_op);
			a1 = zq_mm_load_ps(A + 12 * num_per_op);
			a2 = zq_mm_load_ps(A + 20 * num_per_op);
			a3 = zq_mm_load_ps(A + 28 * num_per_op);
			a4 = zq_mm_load_ps(A + 36 * num_per_op);
			a5 = zq_mm_load_ps(A + 44 * num_per_op);
			a6 = zq_mm_load_ps(A + 52 * num_per_op);
			a7 = zq_mm_load_ps(A + 60 * num_per_op);
			b0 = zq_mm_load_ps(B + 4 * num_per_op);
			b1 = zq_mm_load_ps(B + 12 * num_per_op);
			b2 = zq_mm_load_ps(B + 20 * num_per_op);
			b3 = zq_mm_load_ps(B + 28 * num_per_op);
			b4 = zq_mm_load_ps(B + 36 * num_per_op);
			b5 = zq_mm_load_ps(B + 44 * num_per_op);
			b6 = zq_mm_load_ps(B + 52 * num_per_op);
			b7 = zq_mm_load_ps(B + 60 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 5 * num_per_op);
			a1 = zq_mm_load_ps(A + 13 * num_per_op);
			a2 = zq_mm_load_ps(A + 21 * num_per_op);
			a3 = zq_mm_load_ps(A + 29 * num_per_op);
			a4 = zq_mm_load_ps(A + 37 * num_per_op);
			a5 = zq_mm_load_ps(A + 45 * num_per_op);
			a6 = zq_mm_load_ps(A + 53 * num_per_op);
			a7 = zq_mm_load_ps(A + 61 * num_per_op);
			b0 = zq_mm_load_ps(B + 5 * num_per_op);
			b1 = zq_mm_load_ps(B + 13 * num_per_op);
			b2 = zq_mm_load_ps(B + 21 * num_per_op);
			b3 = zq_mm_load_ps(B + 29 * num_per_op);
			b4 = zq_mm_load_ps(B + 37 * num_per_op);
			b5 = zq_mm_load_ps(B + 45 * num_per_op);
			b6 = zq_mm_load_ps(B + 53 * num_per_op);
			b7 = zq_mm_load_ps(B + 61 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 6 * num_per_op);
			a1 = zq_mm_load_ps(A + 14 * num_per_op);
			a2 = zq_mm_load_ps(A + 22 * num_per_op);
			a3 = zq_mm_load_ps(A + 30 * num_per_op);
			a4 = zq_mm_load_ps(A + 38 * num_per_op);
			a5 = zq_mm_load_ps(A + 46 * num_per_op);
			a6 = zq_mm_load_ps(A + 54 * num_per_op);
			a7 = zq_mm_load_ps(A + 62 * num_per_op);
			b0 = zq_mm_load_ps(B + 6 * num_per_op);
			b1 = zq_mm_load_ps(B + 14 * num_per_op);
			b2 = zq_mm_load_ps(B + 22 * num_per_op);
			b3 = zq_mm_load_ps(B + 30 * num_per_op);
			b4 = zq_mm_load_ps(B + 38 * num_per_op);
			b5 = zq_mm_load_ps(B + 46 * num_per_op);
			b6 = zq_mm_load_ps(B + 54 * num_per_op);
			b7 = zq_mm_load_ps(B + 62 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 7 * num_per_op);
			a1 = zq_mm_load_ps(A + 15 * num_per_op);
			a2 = zq_mm_load_ps(A + 23 * num_per_op);
			a3 = zq_mm_load_ps(A + 31 * num_per_op);
			a4 = zq_mm_load_ps(A + 39 * num_per_op);
			a5 = zq_mm_load_ps(A + 47 * num_per_op);
			a6 = zq_mm_load_ps(A + 55 * num_per_op);
			a7 = zq_mm_load_ps(A + 63 * num_per_op);
			b0 = zq_mm_load_ps(B + 7 * num_per_op);
			b1 = zq_mm_load_ps(B + 15 * num_per_op);
			b2 = zq_mm_load_ps(B + 23 * num_per_op);
			b3 = zq_mm_load_ps(B + 31 * num_per_op);
			b4 = zq_mm_load_ps(B + 39 * num_per_op);
			b5 = zq_mm_load_ps(B + 47 * num_per_op);
			b6 = zq_mm_load_ps(B + 55 * num_per_op);
			b7 = zq_mm_load_ps(B + 63 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			
			zq_mm_store_ps(q, c00);
			C[0] += final_sum(q);
			zq_mm_store_ps(q, c01);
			C[1] += final_sum(q);
			zq_mm_store_ps(q, c02);
			C[2] += final_sum(q);
			zq_mm_store_ps(q, c03);
			C[3] += final_sum(q);
			zq_mm_store_ps(q, c04);
			C[4] += final_sum(q);
			zq_mm_store_ps(q, c05);
			C[5] += final_sum(q);
			zq_mm_store_ps(q, c06);
			C[6] += final_sum(q);
			zq_mm_store_ps(q, c07);
			C[7] += final_sum(q);
			zq_mm_store_ps(q, c10);
			C[8] += final_sum(q);
			zq_mm_store_ps(q, c11);
			C[9] += final_sum(q);
			zq_mm_store_ps(q, c12);
			C[10] += final_sum(q);
			zq_mm_store_ps(q, c13);
			C[11] += final_sum(q);
			zq_mm_store_ps(q, c14);
			C[12] += final_sum(q);
			zq_mm_store_ps(q, c15);
			C[13] += final_sum(q);
			zq_mm_store_ps(q, c16);
			C[14] += final_sum(q);
			zq_mm_store_ps(q, c17);
			C[15] += final_sum(q);
			zq_mm_store_ps(q, c20);
			C[16] += final_sum(q);
			zq_mm_store_ps(q, c21);
			C[17] += final_sum(q);
			zq_mm_store_ps(q, c22);
			C[18] += final_sum(q);
			zq_mm_store_ps(q, c23);
			C[19] += final_sum(q);
			zq_mm_store_ps(q, c24);
			C[20] += final_sum(q);
			zq_mm_store_ps(q, c25);
			C[21] += final_sum(q);
			zq_mm_store_ps(q, c26);
			C[22] += final_sum(q);
			zq_mm_store_ps(q, c27);
			C[23] += final_sum(q);
			zq_mm_store_ps(q, c30);
			C[24] += final_sum(q);
			zq_mm_store_ps(q, c31);
			C[25] += final_sum(q);
			zq_mm_store_ps(q, c32);
			C[26] += final_sum(q);
			zq_mm_store_ps(q, c33);
			C[27] += final_sum(q);
			zq_mm_store_ps(q, c34);
			C[28] += final_sum(q);
			zq_mm_store_ps(q, c35);
			C[29] += final_sum(q);
			zq_mm_store_ps(q, c36);
			C[30] += final_sum(q);
			zq_mm_store_ps(q, c37);
			C[31] += final_sum(q);
			zq_mm_store_ps(q, c40);
			C[32] += final_sum(q);
			zq_mm_store_ps(q, c41);
			C[33] += final_sum(q);
			zq_mm_store_ps(q, c42);
			C[34] += final_sum(q);
			zq_mm_store_ps(q, c43);
			C[35] += final_sum(q);
			zq_mm_store_ps(q, c44);
			C[36] += final_sum(q);
			zq_mm_store_ps(q, c45);
			C[37] += final_sum(q);
			zq_mm_store_ps(q, c46);
			C[38] += final_sum(q);
			zq_mm_store_ps(q, c47);
			C[39] += final_sum(q);
			zq_mm_store_ps(q, c50);
			C[40] += final_sum(q);
			zq_mm_store_ps(q, c51);
			C[41] += final_sum(q);
			zq_mm_store_ps(q, c52);
			C[42] += final_sum(q);
			zq_mm_store_ps(q, c53);
			C[43] += final_sum(q);
			zq_mm_store_ps(q, c54);
			C[44] += final_sum(q);
			zq_mm_store_ps(q, c55);
			C[45] += final_sum(q);
			zq_mm_store_ps(q, c56);
			C[46] += final_sum(q);
			zq_mm_store_ps(q, c57);
			C[47] += final_sum(q);
			zq_mm_store_ps(q, c60);
			C[48] += final_sum(q);
			zq_mm_store_ps(q, c61);
			C[49] += final_sum(q);
			zq_mm_store_ps(q, c62);
			C[50] += final_sum(q);
			zq_mm_store_ps(q, c63);
			C[51] += final_sum(q);
			zq_mm_store_ps(q, c64);
			C[52] += final_sum(q);
			zq_mm_store_ps(q, c65);
			C[53] += final_sum(q);
			zq_mm_store_ps(q, c66);
			C[54] += final_sum(q);
			zq_mm_store_ps(q, c67);
			C[55] += final_sum(q);
			zq_mm_store_ps(q, c70);
			C[56] += final_sum(q);
			zq_mm_store_ps(q, c71);
			C[57] += final_sum(q);
			zq_mm_store_ps(q, c72);
			C[58] += final_sum(q);
			zq_mm_store_ps(q, c73);
			C[59] += final_sum(q);
			zq_mm_store_ps(q, c74);
			C[60] += final_sum(q);
			zq_mm_store_ps(q, c75);
			C[61] += final_sum(q);
			zq_mm_store_ps(q, c76);
			C[62] += final_sum(q);
			zq_mm_store_ps(q, c77);
			C[63] += final_sum(q);
		}
		clock_t t2 = clock();
#if defined(_WIN32)
		double time = (t2 - t1)*0.001;
#else
		double time = (t2 - t1)*0.000001;
#endif
		double gflops = 8.0*8.0*8.0*num_per_op*M / (1024.0*1024.0*1024.0) / time;
		printf("time = %.3f s, gflops = %.3f\n", time, gflops);
		for (k = 0; k < 1; k++)
			printf("%.1e ", C[k]);
		printf("\n");
	}
	_aligned_free(A);
	_aligned_free(B);
	free(C);
}

void test_8x8x16_in_cache(int iter)
{
	float* A = (float*)_aligned_malloc(8 * 16 * num_per_op * sizeof(float), num_per_op * 16);
	float* B = (float*)_aligned_malloc(8 * 16 * num_per_op * sizeof(float), num_per_op * 16);
	float* C = (float*)malloc(8 * 8 * sizeof(float));
	int i, j, k;
	for (i = 0; i < 8 * 16 * num_per_op; i++)
	{
		A[i] = i;
		B[i] = 1;
	}
#if defined(_WIN32)
	_declspec(align(32)) float q[8];
#else
	ZQ_DECLSPEC_ALIGN32 float q[8];
#endif
	register zq_mm_type a0, a1, a2, a3, a4, a5, a6, a7, b0, b1, b2, b3, b4, b5, b6, b7;
	register zq_mm_type c00, c01, c02, c03, c04, c05, c06, c07;
	register zq_mm_type c10, c11, c12, c13, c14, c15, c16, c17;
	register zq_mm_type c20, c21, c22, c23, c24, c25, c26, c27;
	register zq_mm_type c30, c31, c32, c33, c34, c35, c36, c37;
	register zq_mm_type c40, c41, c42, c43, c44, c45, c46, c47;
	register zq_mm_type c50, c51, c52, c53, c54, c55, c56, c57;
	register zq_mm_type c60, c61, c62, c63, c64, c65, c66, c67;
	register zq_mm_type c70, c71, c72, c73, c74, c75, c76, c77;

	int nIters = 5;
	int M = 3 * 1024 * 1024 * iter;
	printf("test 8x8x%d\n", num_per_op * 16);
	for (int i = 0; i < nIters; i++)
	{
		memset(C, 0, sizeof(float) * 64);
		clock_t t1 = clock();
		for (j = 0; j < M; j++)
		{
			a0 = zq_mm_load_ps(A);
			a1 = zq_mm_load_ps(A + 16 * num_per_op);
			a2 = zq_mm_load_ps(A + 32 * num_per_op);
			a3 = zq_mm_load_ps(A + 48 * num_per_op);
			a4 = zq_mm_load_ps(A + 64 * num_per_op);
			a5 = zq_mm_load_ps(A + 80 * num_per_op);
			a6 = zq_mm_load_ps(A + 96 * num_per_op);
			a7 = zq_mm_load_ps(A + 112 * num_per_op);
			b0 = zq_mm_load_ps(B);
			b1 = zq_mm_load_ps(B + 16 * num_per_op);
			b2 = zq_mm_load_ps(B + 32 * num_per_op);
			b3 = zq_mm_load_ps(B + 48 * num_per_op);
			b4 = zq_mm_load_ps(B + 64 * num_per_op);
			b5 = zq_mm_load_ps(B + 80 * num_per_op);
			b6 = zq_mm_load_ps(B + 96 * num_per_op);
			b7 = zq_mm_load_ps(B + 112 * num_per_op);
			c00 = zq_mm_mul_ps(a0, b0);
			c01 = zq_mm_mul_ps(a0, b1);
			c02 = zq_mm_mul_ps(a0, b2);
			c03 = zq_mm_mul_ps(a0, b3);
			c04 = zq_mm_mul_ps(a0, b4);
			c05 = zq_mm_mul_ps(a0, b5);
			c06 = zq_mm_mul_ps(a0, b6);
			c07 = zq_mm_mul_ps(a0, b7);
			c10 = zq_mm_mul_ps(a1, b0);
			c11 = zq_mm_mul_ps(a1, b1);
			c12 = zq_mm_mul_ps(a1, b2);
			c13 = zq_mm_mul_ps(a1, b3);
			c14 = zq_mm_mul_ps(a1, b4);
			c15 = zq_mm_mul_ps(a1, b5);
			c16 = zq_mm_mul_ps(a1, b6);
			c17 = zq_mm_mul_ps(a1, b7);
			c20 = zq_mm_mul_ps(a2, b0);
			c21 = zq_mm_mul_ps(a2, b1);
			c22 = zq_mm_mul_ps(a2, b2);
			c23 = zq_mm_mul_ps(a2, b3);
			c24 = zq_mm_mul_ps(a2, b4);
			c25 = zq_mm_mul_ps(a2, b5);
			c26 = zq_mm_mul_ps(a2, b6);
			c27 = zq_mm_mul_ps(a2, b7);
			c30 = zq_mm_mul_ps(a3, b0);
			c31 = zq_mm_mul_ps(a3, b1);
			c32 = zq_mm_mul_ps(a3, b2);
			c33 = zq_mm_mul_ps(a3, b3);
			c34 = zq_mm_mul_ps(a3, b4);
			c35 = zq_mm_mul_ps(a3, b5);
			c36 = zq_mm_mul_ps(a3, b6);
			c37 = zq_mm_mul_ps(a3, b7);
			c40 = zq_mm_mul_ps(a4, b0);
			c41 = zq_mm_mul_ps(a4, b1);
			c42 = zq_mm_mul_ps(a4, b2);
			c43 = zq_mm_mul_ps(a4, b3);
			c44 = zq_mm_mul_ps(a4, b4);
			c45 = zq_mm_mul_ps(a4, b5);
			c46 = zq_mm_mul_ps(a4, b6);
			c47 = zq_mm_mul_ps(a4, b7);
			c50 = zq_mm_mul_ps(a5, b0);
			c51 = zq_mm_mul_ps(a5, b1);
			c52 = zq_mm_mul_ps(a5, b2);
			c53 = zq_mm_mul_ps(a5, b3);
			c54 = zq_mm_mul_ps(a5, b4);
			c55 = zq_mm_mul_ps(a5, b5);
			c56 = zq_mm_mul_ps(a5, b6);
			c57 = zq_mm_mul_ps(a5, b7);
			c60 = zq_mm_mul_ps(a6, b0);
			c61 = zq_mm_mul_ps(a6, b1);
			c62 = zq_mm_mul_ps(a6, b2);
			c63 = zq_mm_mul_ps(a6, b3);
			c64 = zq_mm_mul_ps(a6, b4);
			c65 = zq_mm_mul_ps(a6, b5);
			c66 = zq_mm_mul_ps(a6, b6);
			c67 = zq_mm_mul_ps(a6, b7);
			c70 = zq_mm_mul_ps(a7, b0);
			c71 = zq_mm_mul_ps(a7, b1);
			c72 = zq_mm_mul_ps(a7, b2);
			c73 = zq_mm_mul_ps(a7, b3);
			c74 = zq_mm_mul_ps(a7, b4);
			c75 = zq_mm_mul_ps(a7, b5);
			c76 = zq_mm_mul_ps(a7, b6);
			c77 = zq_mm_mul_ps(a7, b7);
			a0 = zq_mm_load_ps(A + 1 * num_per_op);
			a1 = zq_mm_load_ps(A + 17 * num_per_op);
			a2 = zq_mm_load_ps(A + 33 * num_per_op);
			a3 = zq_mm_load_ps(A + 49 * num_per_op);
			a4 = zq_mm_load_ps(A + 65 * num_per_op);
			a5 = zq_mm_load_ps(A + 81 * num_per_op);
			a6 = zq_mm_load_ps(A + 97 * num_per_op);
			a7 = zq_mm_load_ps(A + 113 * num_per_op);
			b0 = zq_mm_load_ps(B + 1 * num_per_op);
			b1 = zq_mm_load_ps(B + 17 * num_per_op);
			b2 = zq_mm_load_ps(B + 33 * num_per_op);
			b3 = zq_mm_load_ps(B + 49 * num_per_op);
			b4 = zq_mm_load_ps(B + 65 * num_per_op);
			b5 = zq_mm_load_ps(B + 81 * num_per_op);
			b6 = zq_mm_load_ps(B + 97 * num_per_op);
			b7 = zq_mm_load_ps(B + 113 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 2 * num_per_op);
			a1 = zq_mm_load_ps(A + 18 * num_per_op);
			a2 = zq_mm_load_ps(A + 34 * num_per_op);
			a3 = zq_mm_load_ps(A + 50 * num_per_op);
			a4 = zq_mm_load_ps(A + 66 * num_per_op);
			a5 = zq_mm_load_ps(A + 82 * num_per_op);
			a6 = zq_mm_load_ps(A + 98 * num_per_op);
			a7 = zq_mm_load_ps(A + 114 * num_per_op);
			b0 = zq_mm_load_ps(B + 2 * num_per_op);
			b1 = zq_mm_load_ps(B + 18 * num_per_op);
			b2 = zq_mm_load_ps(B + 34 * num_per_op);
			b3 = zq_mm_load_ps(B + 50 * num_per_op);
			b4 = zq_mm_load_ps(B + 66 * num_per_op);
			b5 = zq_mm_load_ps(B + 82 * num_per_op);
			b6 = zq_mm_load_ps(B + 98 * num_per_op);
			b7 = zq_mm_load_ps(B + 114 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 3 * num_per_op);
			a1 = zq_mm_load_ps(A + 19 * num_per_op);
			a2 = zq_mm_load_ps(A + 35 * num_per_op);
			a3 = zq_mm_load_ps(A + 51 * num_per_op);
			a4 = zq_mm_load_ps(A + 67 * num_per_op);
			a5 = zq_mm_load_ps(A + 83 * num_per_op);
			a6 = zq_mm_load_ps(A + 99 * num_per_op);
			a7 = zq_mm_load_ps(A + 115 * num_per_op);
			b0 = zq_mm_load_ps(B + 3 * num_per_op);
			b1 = zq_mm_load_ps(B + 19 * num_per_op);
			b2 = zq_mm_load_ps(B + 35 * num_per_op);
			b3 = zq_mm_load_ps(B + 51 * num_per_op);
			b4 = zq_mm_load_ps(B + 67 * num_per_op);
			b5 = zq_mm_load_ps(B + 83 * num_per_op);
			b6 = zq_mm_load_ps(B + 99 * num_per_op);
			b7 = zq_mm_load_ps(B + 115 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 4 * num_per_op);
			a1 = zq_mm_load_ps(A + 20 * num_per_op);
			a2 = zq_mm_load_ps(A + 36 * num_per_op);
			a3 = zq_mm_load_ps(A + 52 * num_per_op);
			a4 = zq_mm_load_ps(A + 68 * num_per_op);
			a5 = zq_mm_load_ps(A + 84 * num_per_op);
			a6 = zq_mm_load_ps(A + 100 * num_per_op);
			a7 = zq_mm_load_ps(A + 116 * num_per_op);
			b0 = zq_mm_load_ps(B + 4 * num_per_op);
			b1 = zq_mm_load_ps(B + 20 * num_per_op);
			b2 = zq_mm_load_ps(B + 36 * num_per_op);
			b3 = zq_mm_load_ps(B + 52 * num_per_op);
			b4 = zq_mm_load_ps(B + 68 * num_per_op);
			b5 = zq_mm_load_ps(B + 84 * num_per_op);
			b6 = zq_mm_load_ps(B + 100 * num_per_op);
			b7 = zq_mm_load_ps(B + 116 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 5 * num_per_op);
			a1 = zq_mm_load_ps(A + 21 * num_per_op);
			a2 = zq_mm_load_ps(A + 37 * num_per_op);
			a3 = zq_mm_load_ps(A + 53 * num_per_op);
			a4 = zq_mm_load_ps(A + 69 * num_per_op);
			a5 = zq_mm_load_ps(A + 85 * num_per_op);
			a6 = zq_mm_load_ps(A + 101 * num_per_op);
			a7 = zq_mm_load_ps(A + 117 * num_per_op);
			b0 = zq_mm_load_ps(B + 5 * num_per_op);
			b1 = zq_mm_load_ps(B + 21 * num_per_op);
			b2 = zq_mm_load_ps(B + 37 * num_per_op);
			b3 = zq_mm_load_ps(B + 53 * num_per_op);
			b4 = zq_mm_load_ps(B + 69 * num_per_op);
			b5 = zq_mm_load_ps(B + 85 * num_per_op);
			b6 = zq_mm_load_ps(B + 101 * num_per_op);
			b7 = zq_mm_load_ps(B + 117 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 6 * num_per_op);
			a1 = zq_mm_load_ps(A + 22 * num_per_op);
			a2 = zq_mm_load_ps(A + 38 * num_per_op);
			a3 = zq_mm_load_ps(A + 54 * num_per_op);
			a4 = zq_mm_load_ps(A + 70 * num_per_op);
			a5 = zq_mm_load_ps(A + 86 * num_per_op);
			a6 = zq_mm_load_ps(A + 102 * num_per_op);
			a7 = zq_mm_load_ps(A + 118 * num_per_op);
			b0 = zq_mm_load_ps(B + 6 * num_per_op);
			b1 = zq_mm_load_ps(B + 22 * num_per_op);
			b2 = zq_mm_load_ps(B + 38 * num_per_op);
			b3 = zq_mm_load_ps(B + 54 * num_per_op);
			b4 = zq_mm_load_ps(B + 70 * num_per_op);
			b5 = zq_mm_load_ps(B + 86 * num_per_op);
			b6 = zq_mm_load_ps(B + 102 * num_per_op);
			b7 = zq_mm_load_ps(B + 118 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 7 * num_per_op);
			a1 = zq_mm_load_ps(A + 23 * num_per_op);
			a2 = zq_mm_load_ps(A + 39 * num_per_op);
			a3 = zq_mm_load_ps(A + 55 * num_per_op);
			a4 = zq_mm_load_ps(A + 71 * num_per_op);
			a5 = zq_mm_load_ps(A + 87 * num_per_op);
			a6 = zq_mm_load_ps(A + 103 * num_per_op);
			a7 = zq_mm_load_ps(A + 119 * num_per_op);
			b0 = zq_mm_load_ps(B + 7 * num_per_op);
			b1 = zq_mm_load_ps(B + 23 * num_per_op);
			b2 = zq_mm_load_ps(B + 39 * num_per_op);
			b3 = zq_mm_load_ps(B + 55 * num_per_op);
			b4 = zq_mm_load_ps(B + 71 * num_per_op);
			b5 = zq_mm_load_ps(B + 87 * num_per_op);
			b6 = zq_mm_load_ps(B + 103 * num_per_op);
			b7 = zq_mm_load_ps(B + 119 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 8 * num_per_op);
			a1 = zq_mm_load_ps(A + 24 * num_per_op);
			a2 = zq_mm_load_ps(A + 40 * num_per_op);
			a3 = zq_mm_load_ps(A + 56 * num_per_op);
			a4 = zq_mm_load_ps(A + 72 * num_per_op);
			a5 = zq_mm_load_ps(A + 88 * num_per_op);
			a6 = zq_mm_load_ps(A + 104 * num_per_op);
			a7 = zq_mm_load_ps(A + 120 * num_per_op);
			b0 = zq_mm_load_ps(B + 8 * num_per_op);
			b1 = zq_mm_load_ps(B + 24 * num_per_op);
			b2 = zq_mm_load_ps(B + 40 * num_per_op);
			b3 = zq_mm_load_ps(B + 56 * num_per_op);
			b4 = zq_mm_load_ps(B + 72 * num_per_op);
			b5 = zq_mm_load_ps(B + 88 * num_per_op);
			b6 = zq_mm_load_ps(B + 104 * num_per_op);
			b7 = zq_mm_load_ps(B + 120 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 9 * num_per_op);
			a1 = zq_mm_load_ps(A + 25 * num_per_op);
			a2 = zq_mm_load_ps(A + 41 * num_per_op);
			a3 = zq_mm_load_ps(A + 57 * num_per_op);
			a4 = zq_mm_load_ps(A + 73 * num_per_op);
			a5 = zq_mm_load_ps(A + 89 * num_per_op);
			a6 = zq_mm_load_ps(A + 105 * num_per_op);
			a7 = zq_mm_load_ps(A + 121 * num_per_op);
			b0 = zq_mm_load_ps(B + 9 * num_per_op);
			b1 = zq_mm_load_ps(B + 25 * num_per_op);
			b2 = zq_mm_load_ps(B + 41 * num_per_op);
			b3 = zq_mm_load_ps(B + 57 * num_per_op);
			b4 = zq_mm_load_ps(B + 73 * num_per_op);
			b5 = zq_mm_load_ps(B + 89 * num_per_op);
			b6 = zq_mm_load_ps(B + 105 * num_per_op);
			b7 = zq_mm_load_ps(B + 121 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 10 * num_per_op);
			a1 = zq_mm_load_ps(A + 26 * num_per_op);
			a2 = zq_mm_load_ps(A + 42 * num_per_op);
			a3 = zq_mm_load_ps(A + 58 * num_per_op);
			a4 = zq_mm_load_ps(A + 74 * num_per_op);
			a5 = zq_mm_load_ps(A + 90 * num_per_op);
			a6 = zq_mm_load_ps(A + 106 * num_per_op);
			a7 = zq_mm_load_ps(A + 122 * num_per_op);
			b0 = zq_mm_load_ps(B + 10 * num_per_op);
			b1 = zq_mm_load_ps(B + 26 * num_per_op);
			b2 = zq_mm_load_ps(B + 42 * num_per_op);
			b3 = zq_mm_load_ps(B + 58 * num_per_op);
			b4 = zq_mm_load_ps(B + 74 * num_per_op);
			b5 = zq_mm_load_ps(B + 90 * num_per_op);
			b6 = zq_mm_load_ps(B + 106 * num_per_op);
			b7 = zq_mm_load_ps(B + 122 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 11 * num_per_op);
			a1 = zq_mm_load_ps(A + 27 * num_per_op);
			a2 = zq_mm_load_ps(A + 43 * num_per_op);
			a3 = zq_mm_load_ps(A + 59 * num_per_op);
			a4 = zq_mm_load_ps(A + 75 * num_per_op);
			a5 = zq_mm_load_ps(A + 91 * num_per_op);
			a6 = zq_mm_load_ps(A + 107 * num_per_op);
			a7 = zq_mm_load_ps(A + 123 * num_per_op);
			b0 = zq_mm_load_ps(B + 11 * num_per_op);
			b1 = zq_mm_load_ps(B + 27 * num_per_op);
			b2 = zq_mm_load_ps(B + 43 * num_per_op);
			b3 = zq_mm_load_ps(B + 59 * num_per_op);
			b4 = zq_mm_load_ps(B + 75 * num_per_op);
			b5 = zq_mm_load_ps(B + 91 * num_per_op);
			b6 = zq_mm_load_ps(B + 107 * num_per_op);
			b7 = zq_mm_load_ps(B + 123 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 12 * num_per_op);
			a1 = zq_mm_load_ps(A + 28 * num_per_op);
			a2 = zq_mm_load_ps(A + 44 * num_per_op);
			a3 = zq_mm_load_ps(A + 60 * num_per_op);
			a4 = zq_mm_load_ps(A + 76 * num_per_op);
			a5 = zq_mm_load_ps(A + 92 * num_per_op);
			a6 = zq_mm_load_ps(A + 108 * num_per_op);
			a7 = zq_mm_load_ps(A + 124 * num_per_op);
			b0 = zq_mm_load_ps(B + 12 * num_per_op);
			b1 = zq_mm_load_ps(B + 28 * num_per_op);
			b2 = zq_mm_load_ps(B + 44 * num_per_op);
			b3 = zq_mm_load_ps(B + 60 * num_per_op);
			b4 = zq_mm_load_ps(B + 76 * num_per_op);
			b5 = zq_mm_load_ps(B + 92 * num_per_op);
			b6 = zq_mm_load_ps(B + 108 * num_per_op);
			b7 = zq_mm_load_ps(B + 124 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 13 * num_per_op);
			a1 = zq_mm_load_ps(A + 29 * num_per_op);
			a2 = zq_mm_load_ps(A + 45 * num_per_op);
			a3 = zq_mm_load_ps(A + 61 * num_per_op);
			a4 = zq_mm_load_ps(A + 77 * num_per_op);
			a5 = zq_mm_load_ps(A + 93 * num_per_op);
			a6 = zq_mm_load_ps(A + 109 * num_per_op);
			a7 = zq_mm_load_ps(A + 125 * num_per_op);
			b0 = zq_mm_load_ps(B + 13 * num_per_op);
			b1 = zq_mm_load_ps(B + 29 * num_per_op);
			b2 = zq_mm_load_ps(B + 45 * num_per_op);
			b3 = zq_mm_load_ps(B + 61 * num_per_op);
			b4 = zq_mm_load_ps(B + 77 * num_per_op);
			b5 = zq_mm_load_ps(B + 93 * num_per_op);
			b6 = zq_mm_load_ps(B + 109 * num_per_op);
			b7 = zq_mm_load_ps(B + 125 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 14 * num_per_op);
			a1 = zq_mm_load_ps(A + 30 * num_per_op);
			a2 = zq_mm_load_ps(A + 46 * num_per_op);
			a3 = zq_mm_load_ps(A + 62 * num_per_op);
			a4 = zq_mm_load_ps(A + 78 * num_per_op);
			a5 = zq_mm_load_ps(A + 94 * num_per_op);
			a6 = zq_mm_load_ps(A + 110 * num_per_op);
			a7 = zq_mm_load_ps(A + 126 * num_per_op);
			b0 = zq_mm_load_ps(B + 14 * num_per_op);
			b1 = zq_mm_load_ps(B + 30 * num_per_op);
			b2 = zq_mm_load_ps(B + 46 * num_per_op);
			b3 = zq_mm_load_ps(B + 62 * num_per_op);
			b4 = zq_mm_load_ps(B + 78 * num_per_op);
			b5 = zq_mm_load_ps(B + 94 * num_per_op);
			b6 = zq_mm_load_ps(B + 110 * num_per_op);
			b7 = zq_mm_load_ps(B + 126 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);
			a0 = zq_mm_load_ps(A + 15 * num_per_op);
			a1 = zq_mm_load_ps(A + 31 * num_per_op);
			a2 = zq_mm_load_ps(A + 47 * num_per_op);
			a3 = zq_mm_load_ps(A + 63 * num_per_op);
			a4 = zq_mm_load_ps(A + 79 * num_per_op);
			a5 = zq_mm_load_ps(A + 95 * num_per_op);
			a6 = zq_mm_load_ps(A + 111 * num_per_op);
			a7 = zq_mm_load_ps(A + 127 * num_per_op);
			b0 = zq_mm_load_ps(B + 15 * num_per_op);
			b1 = zq_mm_load_ps(B + 31 * num_per_op);
			b2 = zq_mm_load_ps(B + 47 * num_per_op);
			b3 = zq_mm_load_ps(B + 63 * num_per_op);
			b4 = zq_mm_load_ps(B + 79 * num_per_op);
			b5 = zq_mm_load_ps(B + 95 * num_per_op);
			b6 = zq_mm_load_ps(B + 111 * num_per_op);
			b7 = zq_mm_load_ps(B + 127 * num_per_op);
			c00 = zq_mm_fmadd_ps(a0, b0, c00);
			c01 = zq_mm_fmadd_ps(a0, b1, c01);
			c02 = zq_mm_fmadd_ps(a0, b2, c02);
			c03 = zq_mm_fmadd_ps(a0, b3, c03);
			c04 = zq_mm_fmadd_ps(a0, b4, c04);
			c05 = zq_mm_fmadd_ps(a0, b5, c05);
			c06 = zq_mm_fmadd_ps(a0, b6, c06);
			c07 = zq_mm_fmadd_ps(a0, b7, c07);
			c10 = zq_mm_fmadd_ps(a1, b0, c10);
			c11 = zq_mm_fmadd_ps(a1, b1, c11);
			c12 = zq_mm_fmadd_ps(a1, b2, c12);
			c13 = zq_mm_fmadd_ps(a1, b3, c13);
			c14 = zq_mm_fmadd_ps(a1, b4, c14);
			c15 = zq_mm_fmadd_ps(a1, b5, c15);
			c16 = zq_mm_fmadd_ps(a1, b6, c16);
			c17 = zq_mm_fmadd_ps(a1, b7, c17);
			c20 = zq_mm_fmadd_ps(a2, b0, c20);
			c21 = zq_mm_fmadd_ps(a2, b1, c21);
			c22 = zq_mm_fmadd_ps(a2, b2, c22);
			c23 = zq_mm_fmadd_ps(a2, b3, c23);
			c24 = zq_mm_fmadd_ps(a2, b4, c24);
			c25 = zq_mm_fmadd_ps(a2, b5, c25);
			c26 = zq_mm_fmadd_ps(a2, b6, c26);
			c27 = zq_mm_fmadd_ps(a2, b7, c27);
			c30 = zq_mm_fmadd_ps(a3, b0, c30);
			c31 = zq_mm_fmadd_ps(a3, b1, c31);
			c32 = zq_mm_fmadd_ps(a3, b2, c32);
			c33 = zq_mm_fmadd_ps(a3, b3, c33);
			c34 = zq_mm_fmadd_ps(a3, b4, c34);
			c35 = zq_mm_fmadd_ps(a3, b5, c35);
			c36 = zq_mm_fmadd_ps(a3, b6, c36);
			c37 = zq_mm_fmadd_ps(a3, b7, c37);
			c40 = zq_mm_fmadd_ps(a4, b0, c40);
			c41 = zq_mm_fmadd_ps(a4, b1, c41);
			c42 = zq_mm_fmadd_ps(a4, b2, c42);
			c43 = zq_mm_fmadd_ps(a4, b3, c43);
			c44 = zq_mm_fmadd_ps(a4, b4, c44);
			c45 = zq_mm_fmadd_ps(a4, b5, c45);
			c46 = zq_mm_fmadd_ps(a4, b6, c46);
			c47 = zq_mm_fmadd_ps(a4, b7, c47);
			c50 = zq_mm_fmadd_ps(a5, b0, c50);
			c51 = zq_mm_fmadd_ps(a5, b1, c51);
			c52 = zq_mm_fmadd_ps(a5, b2, c52);
			c53 = zq_mm_fmadd_ps(a5, b3, c53);
			c54 = zq_mm_fmadd_ps(a5, b4, c54);
			c55 = zq_mm_fmadd_ps(a5, b5, c55);
			c56 = zq_mm_fmadd_ps(a5, b6, c56);
			c57 = zq_mm_fmadd_ps(a5, b7, c57);
			c60 = zq_mm_fmadd_ps(a6, b0, c60);
			c61 = zq_mm_fmadd_ps(a6, b1, c61);
			c62 = zq_mm_fmadd_ps(a6, b2, c62);
			c63 = zq_mm_fmadd_ps(a6, b3, c63);
			c64 = zq_mm_fmadd_ps(a6, b4, c64);
			c65 = zq_mm_fmadd_ps(a6, b5, c65);
			c66 = zq_mm_fmadd_ps(a6, b6, c66);
			c67 = zq_mm_fmadd_ps(a6, b7, c67);
			c70 = zq_mm_fmadd_ps(a7, b0, c70);
			c71 = zq_mm_fmadd_ps(a7, b1, c71);
			c72 = zq_mm_fmadd_ps(a7, b2, c72);
			c73 = zq_mm_fmadd_ps(a7, b3, c73);
			c74 = zq_mm_fmadd_ps(a7, b4, c74);
			c75 = zq_mm_fmadd_ps(a7, b5, c75);
			c76 = zq_mm_fmadd_ps(a7, b6, c76);
			c77 = zq_mm_fmadd_ps(a7, b7, c77);

			zq_mm_store_ps(q, c00);
			C[0] += final_sum(q);
			zq_mm_store_ps(q, c01);
			C[1] += final_sum(q);
			zq_mm_store_ps(q, c02);
			C[2] += final_sum(q);
			zq_mm_store_ps(q, c03);
			C[3] += final_sum(q);
			zq_mm_store_ps(q, c04);
			C[4] += final_sum(q);
			zq_mm_store_ps(q, c05);
			C[5] += final_sum(q);
			zq_mm_store_ps(q, c06);
			C[6] += final_sum(q);
			zq_mm_store_ps(q, c07);
			C[7] += final_sum(q);
			zq_mm_store_ps(q, c10);
			C[8] += final_sum(q);
			zq_mm_store_ps(q, c11);
			C[9] += final_sum(q);
			zq_mm_store_ps(q, c12);
			C[10] += final_sum(q);
			zq_mm_store_ps(q, c13);
			C[11] += final_sum(q);
			zq_mm_store_ps(q, c14);
			C[12] += final_sum(q);
			zq_mm_store_ps(q, c15);
			C[13] += final_sum(q);
			zq_mm_store_ps(q, c16);
			C[14] += final_sum(q);
			zq_mm_store_ps(q, c17);
			C[15] += final_sum(q);
			zq_mm_store_ps(q, c20);
			C[16] += final_sum(q);
			zq_mm_store_ps(q, c21);
			C[17] += final_sum(q);
			zq_mm_store_ps(q, c22);
			C[18] += final_sum(q);
			zq_mm_store_ps(q, c23);
			C[19] += final_sum(q);
			zq_mm_store_ps(q, c24);
			C[20] += final_sum(q);
			zq_mm_store_ps(q, c25);
			C[21] += final_sum(q);
			zq_mm_store_ps(q, c26);
			C[22] += final_sum(q);
			zq_mm_store_ps(q, c27);
			C[23] += final_sum(q);
			zq_mm_store_ps(q, c30);
			C[24] += final_sum(q);
			zq_mm_store_ps(q, c31);
			C[25] += final_sum(q);
			zq_mm_store_ps(q, c32);
			C[26] += final_sum(q);
			zq_mm_store_ps(q, c33);
			C[27] += final_sum(q);
			zq_mm_store_ps(q, c34);
			C[28] += final_sum(q);
			zq_mm_store_ps(q, c35);
			C[29] += final_sum(q);
			zq_mm_store_ps(q, c36);
			C[30] += final_sum(q);
			zq_mm_store_ps(q, c37);
			C[31] += final_sum(q);
			zq_mm_store_ps(q, c40);
			C[32] += final_sum(q);
			zq_mm_store_ps(q, c41);
			C[33] += final_sum(q);
			zq_mm_store_ps(q, c42);
			C[34] += final_sum(q);
			zq_mm_store_ps(q, c43);
			C[35] += final_sum(q);
			zq_mm_store_ps(q, c44);
			C[36] += final_sum(q);
			zq_mm_store_ps(q, c45);
			C[37] += final_sum(q);
			zq_mm_store_ps(q, c46);
			C[38] += final_sum(q);
			zq_mm_store_ps(q, c47);
			C[39] += final_sum(q);
			zq_mm_store_ps(q, c50);
			C[40] += final_sum(q);
			zq_mm_store_ps(q, c51);
			C[41] += final_sum(q);
			zq_mm_store_ps(q, c52);
			C[42] += final_sum(q);
			zq_mm_store_ps(q, c53);
			C[43] += final_sum(q);
			zq_mm_store_ps(q, c54);
			C[44] += final_sum(q);
			zq_mm_store_ps(q, c55);
			C[45] += final_sum(q);
			zq_mm_store_ps(q, c56);
			C[46] += final_sum(q);
			zq_mm_store_ps(q, c57);
			C[47] += final_sum(q);
			zq_mm_store_ps(q, c60);
			C[48] += final_sum(q);
			zq_mm_store_ps(q, c61);
			C[49] += final_sum(q);
			zq_mm_store_ps(q, c62);
			C[50] += final_sum(q);
			zq_mm_store_ps(q, c63);
			C[51] += final_sum(q);
			zq_mm_store_ps(q, c64);
			C[52] += final_sum(q);
			zq_mm_store_ps(q, c65);
			C[53] += final_sum(q);
			zq_mm_store_ps(q, c66);
			C[54] += final_sum(q);
			zq_mm_store_ps(q, c67);
			C[55] += final_sum(q);
			zq_mm_store_ps(q, c70);
			C[56] += final_sum(q);
			zq_mm_store_ps(q, c71);
			C[57] += final_sum(q);
			zq_mm_store_ps(q, c72);
			C[58] += final_sum(q);
			zq_mm_store_ps(q, c73);
			C[59] += final_sum(q);
			zq_mm_store_ps(q, c74);
			C[60] += final_sum(q);
			zq_mm_store_ps(q, c75);
			C[61] += final_sum(q);
			zq_mm_store_ps(q, c76);
			C[62] += final_sum(q);
			zq_mm_store_ps(q, c77);
			C[63] += final_sum(q);
		}
		clock_t t2 = clock();
#if defined(_WIN32)
		double time = (t2 - t1)*0.001;
#else
		double time = (t2 - t1)*0.000001;
#endif
		double gflops = 8.0*8.0*16.0*num_per_op*M / (1024.0*1024.0*1024.0) / time;
		printf("time = %.3f s, gflops = %.3f\n", time, gflops);
		for (k = 0; k < 1; k++)
			printf("%.1e ", C[k]);
		printf("\n");
	}
	_aligned_free(A);
	_aligned_free(B);
	free(C);
}

